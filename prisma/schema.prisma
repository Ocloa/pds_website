generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model categories {
  category_id   Int        @id @default(autoincrement())
  category_name String
  projects      projects[]
}

model contests {
  contest_id   Int        @id @default(autoincrement())
  contest_name String
  start_date   DateTime   @db.Date
  end_date     DateTime   @db.Date
  prize        String
  organizer    String
  projects     projects[]
}

model division {
  division_id      Int                @id @default(autoincrement())
  division_name    String
  division_members division_members[]
  projects         projects[]
}

model division_members {
  division_id Int
  user_id     Int
  division    division @relation(fields: [division_id], references: [division_id], onDelete: Cascade, onUpdate: NoAction)
  users       users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([division_id, user_id])
}

model projects {
  project_id            Int        @id @default(autoincrement())
  project_name          String
  project_description   String
  project_creation_date DateTime   @db.Date
  image                 String
  division_id           Int
  category_id           Int
  contest_id            Int
  comments              comments[]
  categories            categories @relation(fields: [category_id], references: [category_id], onDelete: Cascade, onUpdate: NoAction)
  contests              contests   @relation(fields: [contest_id], references: [contest_id], onDelete: Cascade, onUpdate: NoAction)
  division              division   @relation(fields: [division_id], references: [division_id], onDelete: Cascade, onUpdate: NoAction)
  ratings               ratings[]
}

model users {
  user_id          Int                @id @default(autoincrement())
  acc_status       String
  login            String             @unique
  password         String
  email            String
  first_name       String
  last_name        String
  comments         comments[]
  division_members division_members[]
  ratings          ratings[]
}

model comments {
  comment_id   Int      @id @default(autoincrement())
  user_id      Int
  project_id   Int
  comment_text String
  comment_date DateTime @db.Date
  projects     projects @relation(fields: [project_id], references: [project_id], onDelete: Cascade, onUpdate: NoAction)
  users        users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model ratings {
  rating_id   Int      @id @default(autoincrement())
  user_id     Int
  project_id  Int
  score       Int
  rating_date DateTime @db.Date
  projects    projects @relation(fields: [project_id], references: [project_id], onDelete: Cascade, onUpdate: NoAction)
  users       users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}
